voice changer

from pydub import AudioSegment

def change_voice(input_file, output_file, semitones):
    # Load the audio file
    audio = AudioSegment.from_file(input_file)

    # Apply pitch shifting
    shifted_audio = audio._spawn(audio.raw_data, overrides={
        "frame_rate": int(audio.frame_rate * (2 ** (semitones / 12.0)))
    })

    # Export the shifted audio to a file
    shifted_audio.export(output_file, format="wav")

# Example usage
input_file = "Sonic smile.wav"
output_file = "shifted_audio.wav"
semitones = 3  # Adjust the number of semitones here, positive for higher pitch, negative for lower pitch

change_voice(input_file, output_file, semitones)

waveform

from pydub import AudioSegment
import numpy as np
import matplotlib.pyplot as plt

def change_voice(input_file, output_file, semitones):
    # Load the audio file
    audio = AudioSegment.from_file(input_file)

    # Apply pitch shifting
    shifted_audio = audio._spawn(audio.raw_data, overrides={
        "frame_rate": int(audio.frame_rate * (2 ** (semitones / 12.0)))
    })

    # Export the shifted audio to a file
    shifted_audio.export(output_file, format="wav")

    return shifted_audio

def plot_waveform(audio):
    # Convert audio to numpy array
    samples = np.array(audio.get_array_of_samples())

    # Time array
    duration = len(samples) / audio.frame_rate
    t = np.linspace(0, duration, len(samples))

    # Plot waveform
    plt.figure(figsize=(10, 4))
    plt.plot(t, samples)
    plt.title('Waveform')
    plt.xlabel('Time (s)')
    plt.ylabel('Amplitude')
    plt.grid(True)
    plt.show()

# Example usage
input_file = "Sonic smile.wav"
output_file = "shifted_audio.wav"
semitones = 3  # Adjust the number of semitones here, positive for higher pitch, negative for lower pitch

# Change voice
shifted_audio = change_voice(input_file, output_file, semitones)

# Plot waveform
plot_waveform(shifted_audio)

booster

from pydub import AudioSegment

def treble_boost(input_file, output_file, gain_db):
    # Load the audio file
    audio = AudioSegment.from_file(input_file)

    # Apply treble boost (increase high frequencies)
    boosted_audio = audio.high_pass_filter(gain_db)

    # Export the boosted audio to a file
    boosted_audio.export(output_file, format="wav")

# Example usage
input_file = "Sonic smile.wav"   # Path to the input audio file
output_file = "output_audio_treble_boosted.wav"   # Path to the output audio file with treble boost
gain_db = 10  # Adjust the gain (in decibels) for treble boost, positive value increases treble

treble_boost(input_file, output_file, gain_db)
